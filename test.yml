---

- name: Execute the Ansible Openstack demo tasks
  hosts: localhost
  vars_files:
    - vars/install-vars.yml
  tasks:
  - name: Create the test network
    os_network:
      auth:
         auth_url: "{{ os_auth }}"
         username: "{{ cloud_admin }}"
         password: "{{ admin_password }}"
         project_name: "{{ demo_project }}"
         project_domain_name: "{{ project_domain_name }}"
         user_domain_name: "{{ user_domain_name }}"
      state: present
      name: testnet1
      external: False
      shared: False
      wait: yes
    register: testnet_network

  - name: Create the test subnet
    os_subnet:
      auth:
         auth_url: "{{ os_auth }}"
         username: "{{ cloud_admin }}"
         password: "{{ admin_password }}"
         project_name: "{{ demo_project }}"
         project_domain_name: "{{ project_domain_name }}"
         user_domain_name: "{{ user_domain_name }}"
      state: present
      network_name: "{{ testnet_network.id }}"
      name: testnet_sub
      ip_version: 4
      cidr: 192.168.1.0/24
      gateway_ip: 192.168.1.1
      enable_dhcp: yes
      dns_nameservers:
        - 8.8.8.8
    register: testnet_sub

  - name: Create the test router
    ignore_errors: yes
    os_router:
      auth:
         auth_url: "{{ os_auth }}"
         username: "{{ cloud_admin }}"
         password: "{{ admin_password }}"
         project_name: "{{ demo_project }}"
         project_domain_name: "{{ project_domain_name }}"
         user_domain_name: "{{ user_domain_name }}"
      region_name: "{{ region_name }}"
      enable_snat: yes
      state: present
      name: testnet_router
      network: "{{ ext_net }}"
      interfaces:
        - testnet_sub

  - name: Create test port
    os_port:
      auth:
        auth_url: "{{ os_auth }}"
        username: "{{ cloud_admin }}"
        password: "{{ admin_password }}"
        project_name: "{{ demo_project }}"
        project_domain_name: "{{ project_domain_name }}"
        user_domain_name: "{{ user_domain_name }}"
      state: present
      name: "{{ test_port }}"
      network: "{{ testnet_network.id }}"
      # network: testnet
      security_groups: "{{ sec_group }}"
    register: testport_port

  - name: Create server instance
    os_server:
      auth:
         auth_url: "{{ os_auth }}"
         username: "{{ cloud_admin }}"
         password: "{{ admin_password }}"
         project_name: "{{ demo_project }}"
         project_domain_name: "{{ project_domain_name }}"
         user_domain_name: "{{ user_domain_name }}"
      state: present
      name: "{{ test_server }}"
      image: CentOS-7-x86_64-GenericCloud
      flavor: small
      security_groups: default
      key_name: mhatds
      nics:
        # - net-id: "{{ testnet_network.id }}"
        #- net-id: a39b8f6c-cba2-493e-a777-eed61cabf70a
        - port-id: "{{ testport_port.id }}"
      auto_ip: yes
      userdata: |
        #cloud-config

        user: tds2019
        password: tds2019
        chpasswd: {expire: False}
 
        # Send pre-generated ssh private keys to the server (be sure to attach the
        # right corresponding key to the VM.
        ssh_keys:
          rsa_private: | {{ rsa_key }}
        runcmd:

         - sed -i 's/HWADDR/##HWADDR/g' /etc/sysconfig/network-scripts/ifcfg-eth0
         - sed -i 's/GSSAPIAuthentication yes/GSSAPIAuthentication no/g' /etc/ssh/ssh_config
         - sed -i 's/GSSAPIAuthentication yes/GSSAPIAuthentication no/g' /etc/ssh/sshd_config
         - tee -a /etc/ssh/ssh_config <<< "        StrictHostKeyChecking no"
         - systemctl restart sshd

         - echo 'get /home/tds2019/source.dta /home/tds2019/mhatds.dta' >> /home/tds2019/getdata
         - echo 'put /home/tds2019/mhatds.dta /home/tds2019/target.dta' >> /home/tds2019/putdata

         - tee -a /usr/local/bin/runstep1.sh <<< "#!/bin/bash"
         - tee -a /usr/local/bin/runstep1.sh <<< "echo '************ Processing step 1 ************' >> /var/log/mhatds.log"
         - tee -a /usr/local/bin/runstep1.sh <<< 'echo "Processing step 1 on $(date)" >> /var/log/mhatds.log'
         - tee -a /usr/local/bin/runstep1.sh <<< "sleep 5"
         - tee -a /usr/local/bin/runstep1.sh <<< 'sftp -i /etc/ssh/ssh_host_rsa_key -b /home/tds2019/getdata tds2019@192.168.1.5'
         - tee -a /usr/local/bin/runstep1.sh <<< 'ssh -i /etc/ssh/ssh_host_rsa_key tds2019@192.168.1.5 "touch runstep1.txt"'
         - tee -a /usr/local/bin/runstep1.sh <<< 'echo "Step 1 processes completed on $(date)" >> /home/tds2019/runstep1.log'
         - tee -a /usr/local/bin/runstep1.sh <<< "sleep 20"
         - tee -a /usr/local/bin/runstep1.sh <<< "reboot"
         - chmod +x /usr/local/bin/runstep1.sh

         - tee -a /usr/local/bin/runstep2.sh <<< "#!/bin/bash"
         - tee -a /usr/local/bin/runstep2.sh <<< "echo '************ Processing step 2 ************' >> /var/log/mhatds.log"
         - tee -a /usr/local/bin/runstep2.sh <<< 'echo "Processing step 2 on $(date)" >> /var/log/mhatds.log'
         - tee -a /usr/local/bin/runstep2.sh <<< "sleep 20"
         - tee -a /usr/local/bin/runstep2.sh <<< 'pingcount=$(ping -c 3 192.168.2.20 | grep ttl | wc -l)'
         - tee -a /usr/local/bin/runstep2.sh <<< 'while [ $pingcount -eq "0" ]; do'
         - tee -a /usr/local/bin/runstep2.sh <<< "  sleep 10"
         - tee -a /usr/local/bin/runstep2.sh <<< '  pingcount=$(ping -c 3 192.168.2.20 | grep ttl | wc -l)'
         - tee -a /usr/local/bin/runstep2.sh <<< "done"
         - tee -a /usr/local/bin/runstep2.sh <<< 'sftp -i /etc/ssh/ssh_host_rsa_key -b /home/tds2019/putdata tds2019@192.168.2.20' 
         - tee -a /usr/local/bin/runstep2.sh <<< 'ssh -i /etc/ssh/ssh_host_rsa_key tds2019@192.168.2.20 "touch runstep2.txt"'
         - tee -a /usr/local/bin/runstep2.sh <<< 'echo "Step 2 processes completed on $(date)" >> /home/tds2019/runstep2.log'
         - tee -a /usr/local/bin/runstep2.sh <<< "sleep 20"
         - tee -a /usr/local/bin/runstep2.sh <<< "reboot"
         - chmod +x /usr/local/bin/runstep2.sh

         - tee -a /usr/local/bin/runstep3.sh <<< "#!/bin/bash"
         - tee -a /usr/local/bin/runstep3.sh <<< "echo '************ Processing step 3 ************' >> /var/log/mhatds.log"
         - tee -a /usr/local/bin/runstep3.sh <<< 'echo "Processing step 3 on $(date)" >> /var/log/mhatds.log'
         - tee -a /usr/local/bin/runstep3.sh <<< "sleep 5"
         - tee -a /usr/local/bin/runstep3.sh <<< 'echo "Step 3 processes completed on $(date)" >> /home/tds2019/runstep3.log'
         - tee -a /usr/local/bin/runstep3.sh <<< "sleep 20"
         - tee -a /usr/local/bin/runstep3.sh <<< "shutdown"
         - chmod +x /usr/local/bin/runstep3.sh

         - tee -a /usr/local/bin/mhatds.sh <<< "#!/bin/bash"
         - tee -a /usr/local/bin/mhatds.sh <<< 'echo "MHA TDS Controller Service --> $(date)" >> /var/log/mhatds.log'
         - tee -a /usr/local/bin/mhatds.sh <<< "while true"
         - tee -a /usr/local/bin/mhatds.sh <<< "do"
         - tee -a /usr/local/bin/mhatds.sh <<< " echo 'Checking for TDS services to run...' >> /var/log/mhatds.log"
         - tee -a /usr/local/bin/mhatds.sh <<< " if [ ! -f '/home/tds2019/runstep1.log' ]"
         - tee -a /usr/local/bin/mhatds.sh <<< " then"
         - tee -a /usr/local/bin/mhatds.sh <<< "  echo 'Running Step 1...' >> /var/log/mhatds.log"
         - tee -a /usr/local/bin/mhatds.sh <<< "  /usr/local/bin/runstep1.sh"
         - tee -a /usr/local/bin/mhatds.sh <<< " else"
         - tee -a /usr/local/bin/mhatds.sh <<< "  if [ ! -f '/home/tds2019/runstep2.log' ]"
         - tee -a /usr/local/bin/mhatds.sh <<< "  then"
         - tee -a /usr/local/bin/mhatds.sh <<< "   echo 'Running Step 2...' >> /var/log/mhatds.log"
         - tee -a /usr/local/bin/mhatds.sh <<< "   /usr/local/bin/runstep2.sh"
         - tee -a /usr/local/bin/mhatds.sh <<< "  else"
         - tee -a /usr/local/bin/mhatds.sh <<< "   if [ ! -f '/home/tds2019/runstep3.log' ]"
         - tee -a /usr/local/bin/mhatds.sh <<< "   then"
         - tee -a /usr/local/bin/mhatds.sh <<< "    echo 'Running Step 3...' >> /var/log/mhatds.log"
         - tee -a /usr/local/bin/mhatds.sh <<< "    /usr/local/bin/runstep3.sh"
         - tee -a /usr/local/bin/mhatds.sh <<< "   fi"
         - tee -a /usr/local/bin/mhatds.sh <<< "  fi"
         - tee -a /usr/local/bin/mhatds.sh <<< " fi"
         - tee -a /usr/local/bin/mhatds.sh <<< " sleep 60"
         - tee -a /usr/local/bin/mhatds.sh <<< "done"
         - chmod +x /usr/local/bin/mhatds.sh

         - tee -a /etc/systemd/system/mhatds.service <<< "[Unit]"
         - tee -a /etc/systemd/system/mhatds.service <<< "Description=Description for sample script goes here"
         - tee -a /etc/systemd/system/mhatds.service <<< "After=network.target"
         - tee -a /etc/systemd/system/mhatds.service <<< "[Service]"
         - tee -a /etc/systemd/system/mhatds.service <<< "Type=idle"
         - tee -a /etc/systemd/system/mhatds.service <<< "ExecStart=/usr/local/bin/mhatds.sh"
         - tee -a /etc/systemd/system/mhatds.service <<< "TimeoutStartSec=0"
         - tee -a /etc/systemd/system/mhatds.service <<< "[Install]"
         - tee -a /etc/systemd/system/mhatds.service <<< "WantedBy=multi-user.target"
         - systemctl daemon-reload
         - systemctl enable mhatds.service
         - systemctl start mhatds.service
    register: testServer

  - name: Show Server's IP
    debug: var=testServer.openstack.public_v4
